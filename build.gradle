plugins {
    id 'java'
    id 'idea'
    id 'checkstyle'

    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.github.node-gradle.node' version '7.0.1'
    id 'com.github.spotbugs' version '6.0.6'
}

version = '1.0'

repositories {
    mavenCentral()
}

ext {
    lombokVersion = "1.18.30"
    junitVersion = "5.10.1"

    frontendDir = "$projectDir/src/main/webapp"
}

dependencies {
    // Application dependencies
    implementation "org.springframework.boot:spring-boot-starter-web"
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    // Test dependencies
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage"
    }
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
}

// Configure task  'processResources'
test {
    useJUnitPlatform()
}

// Configure task  'processResources'
processResources {
    dependsOn "frontendCopy"
}

// Configure task  'bootJar'
bootJar {
    mainClass.set("com.jcore.cicd.helloworld.HelloworldApplication")
}

// Configure task  'checkstyle'
checkstyle {
    configFile file("checkstyle.xml")
    toolVersion '10.12.7'
}

def frontendDir = "${project.projectDir}/src/main/webapp"

node {
    download = true
    nodeProjectDir = file(frontendDir)
}

// Create a new task names `buildAngular`
task buildAngular(type: NpmTask) {
    dependsOn "npmInstall"

    inputs.files(fileTree("${frontendDir}/node_modules"))
    inputs.files(fileTree("${frontendDir}/src"))
    inputs.file("${frontendDir}/package.json")

    outputs.dir("$frontendDir/dist")

    args = ['run-script', 'build']
}

// Create a new task names `installAngular`
task installAngular(type: NpmTask) {
    // Set input and output so Gradle can
    // determine if task is up-to-date.
    inputs.file "${frontendDir}/package.json"
    outputs.dir "${frontendDir}/node_modules"

    args = ['install']
}

// Create a new task names `installAngular`
task frontendCopy(type: Copy) {
    from buildAngular
    into "${sourceSets.main.output.resourcesDir}/static"
}
